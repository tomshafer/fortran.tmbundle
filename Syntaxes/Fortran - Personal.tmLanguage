<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>f90</string>
		<string>F90</string>
		<string>f95</string>
		<string>F95</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~F</string>
	<key>name</key>
	<string>Fortran - Personal</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-enabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-disabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-other</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#meta</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#constant</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#keyword</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#storage</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#variable</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>all</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#meta</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
			</array>
		</dict>
		<key>all-but-comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#meta</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
			</array>
		</dict>
		<key>all-but-comment-meta</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
			</array>
		</dict>
		<key>all-but-meta</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>!</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>comment.line.exclamation.fortran</string>
				</dict>
			</array>
		</dict>
		<key>constant</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?xi)
                  (?: (?&lt;!\w) [+-]? )        # Match +/- if not preceded by a word character
                  [0-9]+                     # Integer
                  (?:                        # 0 or 1: decimal followed by digits or whitespace
                     \. (?=[0-9\s])
                     [0-9]*
                  )?
                  (?&lt;=[0-9])                 # 0 or 1: exponential notation with optional +/-,
                  (?:                        # but only if preceded by a digit
                     [de]
                     (?:
                        [+-](?=[0-9])        # Only +/- if followed by a digit
                     )?
                     [0-9]+
                  )?
                  (?:                        # Optional Fortran kind tag, which can follow
                     _[a-z]+[0-9]*           # any integer or real
                  )?
               </string>
					<key>name</key>
					<string>constant.numeric.fortran</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)\.(?:true|false)\.</string>
					<key>name</key>
					<string>constant.language.boolean.fortran</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.continuation.fortran</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Sneaky way to match only the ampersand at the end of a line</string>
					<key>match</key>
					<string>(&amp;)\s*$</string>
				</dict>
			</array>
		</dict>
		<key>keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?ix:
                        (?: go\s*to | assign | to | (end\s*)?if | then | else | else\s*if | continue |
                            \\ | stop | pause | (end\s*)?do | while | cycle | exit | end | select\s+case |
                            case(?:\s+default)? | (end\s*)?select | use | only | (?:end\s+)?forall
                         )
                     )\b</string>
					<key>name</key>
					<string>keyword.control.fortran</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?ix:
                        (?: (end\s*)?program | entry | block\s+data | call | return | contains | include )
                     )\b</string>
					<key>name</key>
					<string>keyword.control.programming-units.fortran</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?ix:
                        (?: open | close | read | write | print | inquire | backspace | endfile | format | rewind )
                     )\b</string>
					<key>name</key>
					<string>keyword.control.io.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>modern input/output instrinsics</string>
					<key>match</key>
					<string>\b(?ix:
                        (?: access | action | advance | append | apostrophe | asis | blank | delete |
                            delim | direct | end | eor | err | exist | file | fmt | form | formatted |
                            iolength | iostat | keep | name | named | nextrec | new | nml | no | null |
                            number | old | opened | pad | position | quote | read | readwrite | rec |
                            recl | replace | scratch | sequential | size | status | undefined |
                            unformatted | unit | unknown | write | yes | zero | namelist
                        )(?=\()
                     )</string>
					<key>name</key>
					<string>keyword.control.io.fortran.modern</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x:
                        (?:
                             =&gt;                # Pointer assignment
                           | (?&lt;![/=])=(?!\=)  # Match a single equals, but not the .ne. operator
                           | \-                # Match minus
                           | \+                # Match plus
                           | //                # Match string concatenator
                           | /(?!\=)           # Match division, but not .ne.
                           | (?!^)\*           # Match asterisk not at beginning of line
                           | :{1,2}            # Match single or double colon
                           | \%                # Match modulus
                        )
                     )</string>
					<key>name</key>
					<string>keyword.operator.fortran</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?ix:
                                 (?: \.and\. | \.or\. | \.eq\. | \.lt\. | \.le\. | \.gt\. | \.ge\. |
                                     \.ne\. | \.not\. | \.eqv\. | \.neqv\. | \=\={1,2} | \/\= | \&gt;\= |
                                     (?&lt;!\=)\&gt; | \&lt; | \&lt;\=
                                 )
                              )</string>
					<key>name</key>
					<string>keyword.operator.logical.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>matrix/vector/array instrinsics</string>
					<key>match</key>
					<string>\b(?i:(?:allocate|allocated|deallocate)(?=\())</string>
					<key>name</key>
					<string>keyword.other.instrinsic.array.fortran.modern</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>pointer instrinsics</string>
					<key>match</key>
					<string>\b(?i:(associated)(?=\())</string>
					<key>name</key>
					<string>keyword.other.instrinsic.pointer.fortran.modern</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>argument related intrisics</string>
					<key>match</key>
					<string>\b(?i:(?:present)(?=\())</string>
					<key>name</key>
					<string>keyword.other.instrisic.argument.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>numeric intrisics</string>
					<key>match</key>
					<string>\b(?ix:
                        (?: abs | aimag | aint | anint | cmplx | conjg | dble | dim | dprod | int | max |
                            min | mod | nint | real | sign | digits | epsilon | huge | maxexponent |
                            minexponent | precision | radix | range | tiny
                         )(?=\()
                     )</string>
					<key>name</key>
					<string>keyword.other.instrisic.numeric.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>numeric instrinsics</string>
					<key>match</key>
					<string>\b(?ix:
                        (?: ceiling | floor | modulo )(?=\()
                     )</string>
					<key>name</key>
					<string>keyword.other.instrinsic.numeric.fortran.modern</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>character string intrinsics</string>
					<key>match</key>
					<string>\b(?ix:
                        (?: achar | adjustl | adjustr | char | iachar | ichar | index | len_trim |
                            repeat | scan | string | trim | verify | len
                         )(?=\()
                     )</string>
					<key>name</key>
					<string>keyword.other.instrisic.string.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>mathematical intrisics</string>
					<key>match</key>
					<string>\b(?ix:
                        (?: 
                           (?: 
                              (?: acos | asin | atan | atan2 | cos | cosh | exp | log | log10 | sin |
                                  sinh | sqrt | tan | tanh )(?=\()
                           ) | (random_number | random_seed)
                        )
                     )\b</string>
					<key>name</key>
					<string>keyword.other.instrisic.math.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>data kind intrinsics</string>
					<key>match</key>
					<string>\b(?ix:
                        (?: kind | selected_int_kind | selected_real_kind | transfer )(?=\()
                     )</string>
					<key>name</key>
					<string>keyword.other.instrisic.data.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>logical intrinsics</string>
					<key>match</key>
					<string>\b(?i:(?:logical)(?=\())</string>
					<key>name</key>
					<string>keyword.other.instrisic.logical.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>bit operations intrinsics</string>
					<key>match</key>
					<string>\b(?ix:
                        (?:
                           (?:
                              (?: bit_size | btest | iand | ibclr | ibits | ibset | ieor | ior | ishift |
                                  ishiftc | not )(?=\()
                           ) | mvbits 
                        )
                     )\b</string>
					<key>name</key>
					<string>keyword.other.instrisic.bit.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>floating point intrinsics</string>
					<key>match</key>
					<string>\b(?ix:
                        (?: exponent | fraction | nearest | rrspacing | scale | set_exponent | spacing )
                        (?=\()
                     )</string>
					<key>name</key>
					<string>keyword.other.instrisic.floating-point.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>matrix/vector/array intrisics</string>
					<key>match</key>
					<string>\b(?ix:
                        (?:
                           (?:
                              (?: dot_product | sum | matmul | transpose | all | any | count | maxval |
                                  minval | maxloc | minloc | product | sum | lbound | ubound | shape |
                                  size | merge | pack | unpack | reshape | spread | cshift | eoshift 
                              )(?=\()
                           ) | (?: (?:end\s*)?where | elsewhere )
                        )
                     )\b</string>
					<key>name</key>
					<string>keyword.other.instrisic.array.fortran</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>other intrisics</string>
					<key>match</key>
					<string>\b(?ix:
                        (?: 
                           (?: (?:dtime)(?=\() ) | (?: date_and_time | system_clock )
                        )
                     )\b</string>
					<key>name</key>
					<string>keyword.other.instrisic.fortran</string>
				</dict>
			</array>
		</dict>
		<key>meta</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?i)^\s*(program)\s+([a-z]+[a-z0-9_]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.programming-units.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.program.fortran</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?i)(?&lt;=(?:^|;))\s*((end)\s*(program)\s*(\2)?)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.control.end.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fortran</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.program.fortran</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.program.fortran</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.container.program.fortran</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i)^\s*(module)\s*([a-z]+[a-z0-9_]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.module.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.module.fortran</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Use entity.name.function.module for syntax highlighting</string>
					<key>end</key>
					<string>(?i)(?&lt;=(?:^|;))\s*((end)\s*(module)\s*(\2)?)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.control.end.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fortran</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.module.fortran</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.module.fortran</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.container.module.fortran</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i)^\s*(subroutine)\s+([a-z]+[a-z0-9_]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.subroutine.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.subroutine.fortran</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>In captures, use entity.name.function to appease highlighting</string>
					<key>end</key>
					<string>(?i)(?&lt;=(?:^|;))\s*((end)\s+(subroutine)\s*(\2)?)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.control.end.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fortran</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.subroutine.fortran</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.subroutine.fortran</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.container.subroutine.fortran</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?ix:
                  ^\s*
                  (integer | real | double(?:\s+precision)? | complex | elemental)?
                  \s*
                  (function)\s+([a-z]+[a-z0-9_]*)
               )</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.data.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.fortran</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.function.fortran</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?i)(?&lt;=(?:^|;))\s*((end)\s+(function)\s*(\3)?)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.control.end.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fortran</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.fortran</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.function.fortran</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.container.function.fortran</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?ix:
                  ^[ ]*
                  ( integer | real | double(\s+precision)? | complex | logical | character |
                     block\sdata | operator | assignment | type ) (?!(\s*(subroutine|function))) (?=.*::)
               )</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.data.fortran</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!&lt;(?:\&amp;\s*))\n</string>
					<key>name</key>
					<string>meta.header.specification.fortran</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=(?:^|;))\s*(?i:(use)\s+([a-z]+[a-z0-9_]*))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.module.fortran</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Use entity.name.function.module for syntax highlighting</string>
					<key>end</key>
					<string>(?:(?&lt;!&amp;)\n|;)</string>
					<key>name</key>
					<string>meta.header.use.fortran</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.programming-units.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.subroutine.fortran</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?i)\b(call)\s+([a-z]+[a-z0-9_]*)</string>
					<key>name</key>
					<string>meta.call.fortran</string>
				</dict>
			</array>
		</dict>
		<key>preprocessor-rule-disabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0)\b).*</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.fortran</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.fortran</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.fortran</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.fortran</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
					<key>name</key>
					<string>comment.block.preprocessor.if-branch</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>preprocessor-rule-enabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0*1)\b)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.fortran</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.fortran</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.fortran</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b).*</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.fortran</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.fortran</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>comment.block.preprocessor.else-branch</string>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>preprocessor-rule-other</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.fortran</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.fortran</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b).*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>storage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?ix:
                     (?: integer | real | double(\s+precision)? | complex | logical | character |
                         block\sdata | operator | assignment
                      )
                   )\b</string>
					<key>name</key>
					<string>storage.type.data.fortran</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)\b(end\s+)?function\b</string>
					<key>name</key>
					<string>storage.type.function.fortran</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)\b(end\s+)?type\b</string>
					<key>name</key>
					<string>storage.type.type.fortran</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)\b(end\s+)?module\b</string>
					<key>name</key>
					<string>storage.type.module.fortran</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)\b(end\s+)?subroutine\b</string>
					<key>name</key>
					<string>storage.type.function.fortran</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)\b(end\s+)?interface\b</string>
					<key>name</key>
					<string>storage.type.interface.fortran</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?ix:
                     dimension | implicit(\s+none)? | allocatable | target | pointer | public |
                     private | intent | in | out | inout | common | equivalence | parameter |
                     external | intrinsic | save | data | optional
                  )\b</string>
					<key>name</key>
					<string>storage.modifier.fortran</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>end</key>
					<string>'</string>
					<key>name</key>
					<string>string.quoted.single.fortran</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.fortran</string>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?i)\b[a-z]+[a-z0-9_]*\b</string>
					<key>name</key>
					<string>variable.other.generic.fortran</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.fortran.ts</string>
	<key>uuid</key>
	<string>B516C4BF-83EB-426D-AA7F-E6154D63084B</string>
</dict>
</plist>
